## Assignment 1:

from pyspark import SparkContext
sc = SparkContext("local", "AverageWeight")
avg_rdd = sc.textFile('/FileStore/tables/cars.tsv').map(lambda x: x.split('\t')).filter(lambda x: x[9] == 'American').map(lambda x: (x[0], (int(x[6]), 1))).reduceByKey(lambda x, y: (x[0] + y[0], x[1] + y[1])).mapValues(lambda x: x[0] // x[1]) 
output = avg_rdd.collect() 
for make, avg_weight in output: 
	print(f"({make}, {avg_weight})")

## Assignment 2:

import pyspark
from pyspark.sql import SparkSession

# Create a Spark session
spark = SparkSession.builder.appName("TopProductsByVolumeSQL").getOrCreate()

# Read the CSV file
data = spark.read.csv("/FileStore/tables/OnlineRetail-1.csv", header="True", inferSchema="True")

# Create a temporary view to use SQL queries
data.createOrReplaceTempView("online_retail")

# Run SQL query to get the top 25 products with highest monthly sales by volume
top_products_query = """
    SELECT StockCode, LEFT(InvoiceDate, 7) AS InvoiceMonth, SUM(Quantity) AS TotalQuantity
    FROM online_retail
    WHERE InvoiceDate IS NOT NULL
    GROUP BY StockCode, InvoiceMonth
    ORDER BY TotalQuantity DESC
    LIMIT 25
"""

top_products_df = spark.sql(top_products_query)

# Show the results
top_products_df.show()




## Assignment 3

from pyspark.sql import SparkSession
from pyspark.sql.functions import *

# Create a Spark session
spark = SparkSession.builder.appName("TotalSaleAnalysis").getOrCreate()

# Read the CSV file
file_path = "/FileStore/tables/OnlineRetail-1.csv"
data = spark.read.csv(file_path, header="True", inferSchema="True")

# Preprocess data to calculate sales value and extract year and month
data = data.withColumn("SalesValue", round(col("Quantity") * col("UnitPrice"), 2))\
           .withColumn("InvoiceMonth", to_date(col("InvoiceDate"), "M/d/yyyy H:mm").cast("date"))\
           .filter(year("InvoiceMonth") == 2011)

# Calculate total sale value and total orders per month
monthly_sales = data.groupBy("InvoiceMonth")\
                    .agg(round(sum("SalesValue"), 1).alias("TotalSaleValue"),
                         countDistinct("InvoiceNo").alias("TotalOrders"))\
                    .sort(col("TotalSaleValue").desc())

# Show the results
monthly_sales.show()

## Assignment 4

