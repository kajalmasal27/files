## Assignment 1:

from pyspark import SparkContext
sc = SparkContext("local", "AverageWeight")
avg_rdd = sc.textFile('/FileStore/tables/cars.tsv').map(lambda x: x.split('\t')).filter(lambda x: x[9] == 'American').map(lambda x: (x[0], (int(x[6]), 1))).reduceByKey(lambda x, y: (x[0] + y[0], x[1] + y[1])).mapValues(lambda x: x[0] // x[1]) 
output = avg_rdd.collect() 
for make, avg_weight in output: 
	print(f"({make}, {avg_weight})")

## Assignment 2:

from pyspark.sql import SparkSession
from pyspark.sql.functions import col, sum, rank
from pyspark.sql.window import Window

# Create a Spark session
spark = SparkSession.builder.appName("TopProductsByVolume").getOrCreate()

# Read the CSV file
file_path = "/FileStore/tables/OnlineRetail-1.csv"
data = spark.read.csv(file_path, header="True", inferSchema="True")

# Extract only the date from InvoiceDate and create InvoiceMonth column
data = data.withColumn("InvoiceMonth", col("InvoiceDate").substr(7, 4) + "-" + col("InvoiceDate").substr(1, 2))

# Calculate total quantity per StockCode and InvoiceMonth
total_quantity_df = data.groupBy("StockCode", "InvoiceMonth").agg(sum("Quantity").alias("TotalQuantity"))

# Rank products based on TotalQuantity within each month
window_spec = Window.partitionBy("InvoiceMonth").orderBy(col("TotalQuantity").desc())
ranked_df = total_quantity_df.withColumn("rank", rank().over(window_spec))

# Filter for top-ranked products in each month
top_products_df = ranked_df.filter(col("rank") <= 25)

# Select relevant columns and show the results
top_products_df.select("StockCode", "InvoiceMonth", "TotalQuantity").show()

# Stop the Spark session


## Assignment 3

from pyspark.sql import SparkSession
from pyspark.sql.functions import *

# Create a Spark session
spark = SparkSession.builder.appName("TotalSaleAnalysis").getOrCreate()

# Read the CSV file
file_path = "/FileStore/tables/OnlineRetail-1.csv"
data = spark.read.csv(file_path, header="True", inferSchema="True")

# Preprocess data to calculate sales value and extract year and month
data = data.withColumn("SalesValue", round(col("Quantity") * col("UnitPrice"), 2))\
           .withColumn("InvoiceMonth", to_date(col("InvoiceDate"), "M/d/yyyy H:mm").cast("date"))\
           .filter(year("InvoiceMonth") == 2011)

# Calculate total sale value and total orders per month
monthly_sales = data.groupBy("InvoiceMonth")\
                    .agg(round(sum("SalesValue"), 1).alias("TotalSaleValue"),
                         countDistinct("InvoiceNo").alias("TotalOrders"))\
                    .sort(col("TotalSaleValue").desc())

# Show the results
monthly_sales.show()

## Assignment 4

